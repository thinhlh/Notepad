[{"path":"","header":"Document 1*","text":"using System;\nusing System.Collections.Generic;\nusing System.Drawing;\nusing System.Linq;\nusing System.Text;\nusing System.Text.RegularExpressions;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Input;\nusing Notepad.Snippets;\nnamespace Notepad.Classes\n{\n    /// <summary>\n    /// Interaction logic for RichTextBoxUC.xaml\n    /// </summary>\n    public partial class RichTextBoxUC : UserControl\n    {\n        #region field\n\n        private Font defaultFont = new Font(System.Drawing.FontFamily.GenericSansSerif, 14, System.Drawing.FontStyle.Regular);\n        private Color defaultColor = Color.Black;\n        private Color defaultBackColor = Color.White;\n        private MainWindow mainWindow = Application.Current.MainWindow as MainWindow;\n        private Control virtualControl = null;\n        private Languages _language=Languages.None;\n        public Languages Language { \n            get => _language; \n            set { \n                _language = value;\n                InvokeHighlightAll(); \n            }\n        }\n        public int previousCaret = 0;\n        public int currentCaret = 0;\n        public ISnippet highlighter=new PlainText();\n\n        public string Text\n        {\n            get => richTextBox.Text;\n            set\n            {\n                richTextBox.Text = value;\n                //richTextBox.ScrollToCaret();\n            }\n        }\n\n        \n        #endregion\n        public RichTextBoxUC()\n        {\n            InitializeComponent();\n            this.DataContext = mainWindow;\n\n\n            #region Setup RichTextBox\n\n            richTextBox.TextChanged += richTextBox_TextChangedSavedIcon;\n            richTextBox.TextChanged += richTextBox_Highlight;\n            richTextBox.TextChanged += RichTextBox_TextChangedLineNumber;\n            richTextBox.Font = defaultFont;\n            #endregion\n        }\n\n        private void CountLineNumber()\n        {\n            TabControl tabControl = mainWindow.tabControl;\n            (mainWindow.tabItems[tabControl.SelectedIndex].Content as TabItemContentUC).textBox.Text = \"\";\n\n\n            int firstLine = GetFirstVisibleLine();\n            int lastLine = GetLastVisibleLine();\n            StringBuilder stringBuilder = new StringBuilder();\n            if (firstLine == lastLine) (mainWindow.tabItems[tabControl.SelectedIndex].Content as TabItemContentUC).textBox.Text = (firstLine + 1).ToString() + \"\\n\";\n            else\n            {\n                for (int i = firstLine + 1; i <= lastLine + 1; i++)\n                {\n\n                    stringBuilder.AppendLine(i.ToString());\n                }\n                (mainWindow.tabItems[tabControl.SelectedIndex].Content as TabItemContentUC).textBox.Text = stringBuilder.ToString();\n            }\n        }\n        private void RichTextBox_TextChangedLineNumber(object sender, EventArgs e)\n        {\n\n            CountLineNumber();\n        }\n\n\n\n        public void richTextBox_TextChangedSavedIcon(object sender, EventArgs e)\n        {\n\n            List<MainTabItem> tabItems = mainWindow.tabItems;\n            TabControl tabControl = mainWindow.tabControl;\n\n            if (tabControl.SelectedIndex < 0) //Initialize\n                tabItems[tabItems.Count - 1].Data = Text;\n            else\n                tabItems[tabControl.SelectedIndex].Data = Text;\n\n            MainWindowExtension.RaiseUnsavedIcon();\n        }\n        public void richTextBox_Highlight(object sender,EventArgs e)\n        {\n            InvokeHighlight();         \n        }\n\n        private void InvokeHighlight()\n        {\n            if (virtualControl == null)\n            {\n                virtualControl = mainWindow;\n                virtualControl.Focus();\n            }\n            //Unsubscribe TextChanged Events\n            richTextBox.TextChanged -= this.richTextBox_Highlight;\n            richTextBox.TextChanged -= this.richTextBox_TextChangedSavedIcon;\n            richTextBox.TextChanged -= this.RichTextBox_TextChangedLineNumber;\n\n            //check for highlight and return highlighter here\n\n            int currentCaret = richTextBox.SelectionStart;\n\n            if (Language == Languages.CSharph)\n                highlighter = new CSharph();\n            else if (Language == Languages.Java)\n                highlighter = new Java();\n            else if (Language == Languages.CPlusPlus)\n                highlighter = new CPlusPlus();\n            else if (Language == Languages.C)\n                highlighter = new C();\n            else\n                highlighter = new PlainText();\n\n            highlighter.Highlight();\n\n            richTextBox.Focus();\n            richTextBox.SelectionStart = currentCaret;\n\n            //Subscribe TextChanged events;\n            richTextBox.TextChanged += this.richTextBox_Highlight;\n            richTextBox.TextChanged += this.richTextBox_TextChangedSavedIcon;\n            richTextBox.TextChanged += this.RichTextBox_TextChangedLineNumber;\n\n            virtualControl = null;\n        }\n\n        private void InvokeHighlightAll()\n        {\n            if (virtualControl == null)\n            {\n                virtualControl = mainWindow;\n                virtualControl.Focus();\n            }\n\n            //Unsubscribe TextChanged events;\n            richTextBox.TextChanged -= this.richTextBox_Highlight;\n            richTextBox.TextChanged -= this.richTextBox_TextChangedSavedIcon;\n            richTextBox.TextChanged -= this.RichTextBox_TextChangedLineNumber;\n\n            //check for highlight and return highlighter here\n\n            int currentCaret = richTextBox.SelectionStart;\n\n            if (Language == Languages.CSharph)\n                highlighter = new CSharph();\n            else if (Language == Languages.Java)\n                highlighter = new Java();\n            else if (Language == Languages.CPlusPlus)\n                highlighter = new CPlusPlus();\n            else if (Language == Languages.C)\n                highlighter = new C();\n            else\n                highlighter = new PlainText();\n\n            highlighter.HighlightRange(0, richTextBox.Text.Length);\n\n            richTextBox.Focus();\n            richTextBox.SelectionStart = currentCaret;\n\n            //Subscribe TextChanged events;\n            richTextBox.TextChanged += this.richTextBox_Highlight;\n            richTextBox.TextChanged += this.richTextBox_TextChangedSavedIcon;\n            richTextBox.TextChanged += this.RichTextBox_TextChangedLineNumber;\n\n            virtualControl = null;\n        }\n\n        \n\n        \n\n        #region Extension Methods\n\n        \n\n        public void SetStyle(string Pattern, TokenType tokenType) //the range should be the first character of the lineBefore textchanged and the last character of the line after changed\n        {\n            string token = richTextBox.Text.Substring(richTextBox.SelectionStart, richTextBox.SelectionLength);\n            MatchCollection matchCollection = Regex.Matches(token, Pattern);\n\n            if (matchCollection.Count < 1) return;\n\n            int currentPosition = richTextBox.SelectionStart;\n            int currenLength = richTextBox.SelectionLength;\n            int offset = richTextBox.SelectionStart;\n\n            \n\n            foreach (Match m in matchCollection)\n            {\n                richTextBox.SelectionStart = m.Index + offset;\n                richTextBox.SelectionLength = m.Length;\n                richTextBox.SelectionColor = Color.Transparent;\n\n                if (tokenType == TokenType.keywords)\n                {\n                    foreach (Dictionary<string, string> keyword in JsonDeserialize.CSharph.keywords)\n                    {\n                        var key = keyword.Keys.ToList();\n                        if (key.Contains(m.Value))\n                        {\n                            richTextBox.SelectionColor = JsonDeserialize.GetColorFromString(keyword[m.Value]);\n                            break;\n                        }\n                    }\n                }\n\n                else if (tokenType == TokenType.comment)\n                {\n                    richTextBox.SelectionColor = JsonDeserialize.GetColorFromString(JsonDeserialize.CSharph.comment);\n                    richTextBox.SelectionFont = new Font(richTextBox.Font, System.Drawing.FontStyle.Italic);\n                }\n\n                else if (tokenType == TokenType.String)\n                {\n                    richTextBox.SelectionColor = JsonDeserialize.GetColorFromString(JsonDeserialize.CSharph.String);\n                }\n\n                else if(tokenType==TokenType.preprocessor)\n                {\n                    richTextBox.SelectionColor = JsonDeserialize.GetColorFromString(JsonDeserialize.CSharph.preprocessor);\n                }\n            }\n\n            richTextBox.SelectionStart = currentPosition;\n            richTextBox.SelectionLength = currenLength;\n        }\n\n\n        public void SetStyle(int start,int length,string Pattern, TokenType tokenType) //the range should be the first character of the lineBefore textchanged and the last character of the line after changed\n        {\n            string token = richTextBox.Text.Substring(start,length);\n            MatchCollection matchCollection = Regex.Matches(token, Pattern);\n\n            if (matchCollection.Count < 1) return;\n\n            int currentPosition = richTextBox.SelectionStart;\n            int currenLength = richTextBox.SelectionLength;\n            int offset = richTextBox.SelectionStart;\n\n\n\n            foreach (Match m in matchCollection)\n            {\n                richTextBox.SelectionStart = m.Index + offset;\n                richTextBox.SelectionLength = m.Length;\n                richTextBox.SelectionColor = Color.Transparent;\n\n                if (tokenType == TokenType.keywords)\n                {\n                    foreach (Dictionary<string, string> keyword in JsonDeserialize.CSharph.keywords)\n                    {\n                        var key = keyword.Keys.ToList();\n                        if (key.Contains(m.Value))\n                        {\n                            richTextBox.SelectionColor = JsonDeserialize.GetColorFromString(keyword[m.Value]);\n                            break;\n                        }\n                    }\n                }\n\n                else if (tokenType == TokenType.comment)\n                {\n                    richTextBox.SelectionColor = JsonDeserialize.GetColorFromString(JsonDeserialize.CSharph.comment);\n                    richTextBox.SelectionFont = new Font(richTextBox.Font, System.Drawing.FontStyle.Italic);\n                }\n\n                else if (tokenType == TokenType.String)\n                {\n                    richTextBox.SelectionColor = JsonDeserialize.GetColorFromString(JsonDeserialize.CSharph.String);\n                }\n\n                else if (tokenType == TokenType.preprocessor)\n                {\n                    richTextBox.SelectionColor = JsonDeserialize.GetColorFromString(JsonDeserialize.CSharph.preprocessor);\n                }\n            }\n\n            richTextBox.SelectionStart = currentPosition;\n            richTextBox.SelectionLength = currenLength;\n        }\n\n\n        public void ClearStyle()\n        {\n\n            previousCaret = (previousCaret > currentCaret) ? currentCaret - 1 : previousCaret;\n\n\n            richTextBox.SelectionStart = GetFirstCharIndexFromLine(previousCaret);\n            richTextBox.SelectionLength = GetLastCharIndexFromLine(currentCaret) - richTextBox.SelectionStart;\n\n            richTextBox.SelectionColor = defaultColor; // can change to the system.default color\n            richTextBox.SelectionFont = defaultFont;\n            richTextBox.SelectionBackColor = defaultBackColor;\n            \n        }\n\n        public void ClearStyle(int start,int length)\n        {\n\n            richTextBox.SelectionStart = start;\n            richTextBox.SelectionLength = length;\n\n            richTextBox.SelectionColor = defaultColor;\n            richTextBox.SelectionBackColor = defaultBackColor;\n            richTextBox.SelectionFont = defaultFont;\n            \n\n        }\n        private int GetFirstCharIndexFromLine(int charIndexOfLine)\n        {\n            int firstCharIndex = charIndexOfLine;\n\n            if (firstCharIndex < 0 || firstCharIndex > richTextBox.Text.Length) return 0;\n\n            while (firstCharIndex > 0 && Text[firstCharIndex - 1] != '\\n')\n            {\n                firstCharIndex--;\n            }\n\n            return firstCharIndex;\n        }\n        \n\n        private int GetLastCharIndexFromLine(int charIndexOfLine)\n        {\n\n            if (charIndexOfLine < 0 || charIndexOfLine > richTextBox.Text.Length) return richTextBox.Text.Length;\n\n            while (charIndexOfLine < richTextBox.Text.Length && Text[charIndexOfLine] != '\\n')\n            {\n                charIndexOfLine++;\n            }\n\n            return charIndexOfLine;\n        }\n\n\n        public int GetFirstVisibleLine()\n        {\n            int index = richTextBox.GetCharIndexFromPosition(new System.Drawing.Point(0, 0));\n            int line = richTextBox.GetLineFromCharIndex(index);\n            return line;\n        }\n\n        public int GetLastVisibleLine()\n        {\n            int index = richTextBox.GetCharIndexFromPosition(new System.Drawing.Point(0, richTextBox.Height));\n            int line = richTextBox.GetLineFromCharIndex(index);\n            return line;\n        }\n        #endregion\n\n        private void richTextBox_PreviewKeyDown(object sender, System.Windows.Forms.PreviewKeyDownEventArgs e)\n        {\n            if(e.Control&&e.KeyCode==System.Windows.Forms.Keys.N&&Commands.NewFileCanExecute)\n            {\n                Commands.NewFileExecuted();\n            }\n            else if(e.Control&&e.KeyCode==System.Windows.Forms.Keys.O&&Commands.OpenFileCanExecute)\n            {\n                Commands.OpenFileExecuted();\n            }\n            else if(e.Control&&e.Shift&&e.KeyCode==System.Windows.Forms.Keys.O&&Commands.OpenFolderCanExecute)\n            {\n                Commands.OpenFolderExecuted();\n            }\n            else if(e.Control&&e.KeyCode==System.Windows.Forms.Keys.S&&Commands.SaveCanExecute)\n            {\n                Commands.SaveExecuted();\n            }\n            else if(e.Control&&e.Shift&&e.KeyCode==System.Windows.Forms.Keys.S&&Commands.SaveAsCanExecute)\n            {\n                Commands.SaveAsExecuted();\n            }\n            else if(e.Control&&e.KeyCode==System.Windows.Forms.Keys.W&&Commands.CloseAllFilesCanExecute)\n            {\n                Commands.CloseFileExecuted();\n            }\n            else if(e.Control&&e.KeyCode==System.Windows.Forms.Keys.T&&Commands.NewTerminalCanExecute)\n            {\n                Commands.NewTerminalExecuted();\n            }\n            else if(e.Control&&e.Shift&&e.KeyCode==System.Windows.Forms.Keys.T&&Commands.NewTerminalCurrentDirCanExecute)\n            {\n                Commands.NewTerminalCurrentDirExecuted();\n            }\n            else if(e.Control&&e.KeyCode==System.Windows.Forms.Keys.B&&Commands.BuildCanExecute)\n            {\n                Commands.BuildExecuted();\n            }\n            else if(e.Control&&e.Shift&&e.KeyCode==System.Windows.Forms.Keys.B&&Commands.BuildAndRunCanExecute)\n            {\n                Commands.BuildAndRunExecuted();\n            }\n        }\n\n        private void richTextBox_VScroll(object sender, EventArgs e)\n        {\n            ScrollChangedEventArgs scrollChangedEventArgs = e as ScrollChangedEventArgs;\n            CountLineNumber();\n        }\n    }\n}","language":"Java"}]
