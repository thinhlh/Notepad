[{"path":"","header":"Document 1*","text":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows;\nusing System.Windows.Controls;\nusing Microsoft.Win32;\nusing Notepad;\nnamespace Notepad.Classes\n{\n    /// <summary>\n    /// Use for Extension Methods of MainWindow\n    /// </summary>\n    public static class MainWindowExtension\n    {\n        /// <summary>\n        /// Params to access fields easiers\n        /// </summary>\n        private static MainWindow mainWindow = Application.Current.MainWindow as MainWindow;\n        private static TabControl tabControl = (Application.Current.MainWindow as MainWindow).tabControl;\n        private static List<MainTabItem> tabItems = (Application.Current.MainWindow as MainWindow).tabItems;\n        private static List<int> closedTabIndexes = (Application.Current.MainWindow as MainWindow).closedTabIndexes;\n\n\n        public static void InitializeTabItem()\n        {\n            MainTabItem tabItem = new MainTabItem();\n            //\n            //Add tabItem to tabControl\n            //\n            tabControl.Items.Add(tabItem);\n            tabItems.Add(tabItem);\n            tabItem.Focus(); // selected index will focus on the new tab\n\n\n\n            //Setup for tabItem\n            int tabIndex = FindIndexForTab();\n            tabItem.Header = \"Document \" + (tabIndex + 1); // Header Display Always larger than 1 of the number of element in tabItems\n            tabItem.Name = \"TabItem\" + (tabIndex);\n\n            //Set Content for TabItem\n        }\n\n        public static int FindIndexForTab() // this function define which tabIndex is approriate for InitTab \n        {\n            if (closedTabIndexes.Count == 0)\n                return tabControl.Items.Count - 1;\n            else\n            {\n                int index = closedTabIndexes[0];\n                closedTabIndexes.RemoveAt(0);\n                return index;\n            }\n        }\n\n        public static void UpdateStatusBar(int index)\n        {\n            if (index == -1)\n                mainWindow.StatusText.DataContext = \"None\";// No update when close all tab\n            else if (tabItems[index].FilePath == \"\")\n                mainWindow.StatusText.DataContext = \"Plain Text\";\n            else\n                mainWindow.StatusText.DataContext = tabItems[tabControl.SelectedIndex].FilePath;\n        }\n        public static void RaiseUnsavedIcon()\n        {\n            List<MainTabItem> tabItems = mainWindow.tabItems;\n            TabControl tabControl = mainWindow.tabControl;\n\n            if (tabItems[tabControl.SelectedIndex].IsSaved == false)\n            {\n                return;\n            }\n            else\n            {\n                if (string.IsNullOrWhiteSpace(tabItems[tabControl.SelectedIndex].Data)) //Initialize Circumstance\n                    return;\n                else\n                {\n                    //Raise* at the end and keep isSaved = false when there is a change with out save before\n                    tabItems[tabControl.SelectedIndex].Header += \"*\";\n                    tabItems[tabControl.SelectedIndex].IsSaved = false;\n                }\n            }\n\n            (tabItems[tabControl.SelectedIndex].Content as TabItemContentUC).richTextBoxUserControl.richTextBox.TextChanged -= (tabItems[tabControl.SelectedIndex].Content as TabItemContentUC).richTextBoxUserControl.richTextBox_TextChangedSavedIcon;\n            //Resubscribe when this tab is Saved\n        }\n\n        private static void RemoveSavedIcon(int index)\n        {\n            tabItems[index].IsSaved = true;\n\n            string header = tabItems[index].Header.ToString();\n            tabItems[index].Header = header.Remove(header.Length - 1, 1);\n        }\n\n        public static string GetParentFullPath(int index)\n        {\n            return Path.Combine(tabItems[index].FilePath, \"..\");\n        }\n\n        public static DirectoryInfo TryGetSolutionDirectoryInfo(string currentPath = null)\n        {\n            var directory = new DirectoryInfo(\n                currentPath ?? Directory.GetCurrentDirectory());\n            while (directory != null &&!directory.GetFiles(\"*.sln\").Any())\n            {\n                directory = directory.Parent;\n            }\n            return directory;\n        }\n        \n        public static List<TemporaryDetail> DeserializeTemporaryDetail()\n        {\n            string JsonPath = TryGetSolutionDirectoryInfo().FullName + @\"\\Notepad\\temp\\TabDetails.json\";\n\n            if (!File.Exists(JsonPath)) return null;\n            string output = File.ReadAllText(JsonPath);\n            var details = Newtonsoft.Json.JsonConvert.DeserializeObject<List<TemporaryDetail>>(output);\n            return details;\n        }\n        \n        public static void SaveExecuted(int index)\n        {\n            if (!tabItems[index].IsSaved || string.IsNullOrWhiteSpace(tabItems[index].Data)) // not yet saved or new tab but not have data\n            {\n                SaveFileDialog saveFileDialog = new SaveFileDialog();\n\n                bool fileExsisted = System.IO.File.Exists(tabItems[index].FilePath);\n                if (fileExsisted)\n                {\n                    System.IO.File.WriteAllText(tabItems[index].FilePath, tabItems[index].Data);\n                    RemoveSavedIcon(index);\n                }\n                else SaveAsExecuted(index);\n            }\n            (tabItems[index].Content as TabItemContentUC).richTextBoxUserControl.richTextBox.TextChanged += (tabItems[index].Content as TabItemContentUC).richTextBoxUserControl.richTextBox_TextChangedSavedIcon;\n            //subscribe to listen when text changed again\n        }\n        public static void SaveAsExecuted(int index)\n        {\n            SaveFileDialog saveFileDialog = new SaveFileDialog();\n\n            saveFileDialog.InitialDirectory = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);\n            saveFileDialog.DefaultExt = \".txt\";\n            saveFileDialog.Filter = \"Text (*.txt)|*.txt| Java (*.java) |*.java| C (*.c) |*.c| C++ (*.cpp) |*.cpp| C# (*.cs) |*.cs| All files (*.*) |*.* \";\n            string tabHeader = (string)tabItems[tabControl.SelectedIndex].Header;\n            saveFileDialog.FileName = tabHeader.Substring(0, tabHeader.Length - 1); // remove the * flag\n            if (saveFileDialog.ShowDialog() == true)\n            {\n                System.IO.File.WriteAllText(saveFileDialog.FileName, tabItems[index].Data);\n                RemoveSavedIcon(index);\n                tabItems[index].Header = Path.GetFileName(saveFileDialog.FileName);\n                tabItems[index].FilePath = saveFileDialog.FileName;\n\n                //Update Status Bar\n                UpdateStatusBar(index);\n            }\n        }\n        public static void CloseFileExecuted(int index)\n        {\n            if (tabItems[index].IsSaved == false)\n            {\n                //Message then request save\n                string tabHeader = (string)tabItems[index].Header;\n                string message = tabHeader.Substring(0, tabHeader.Length - 1) + \" have been modified, save changes?\";\n\n                MessageBoxResult result = MessageBox.Show(message, \"Request\", MessageBoxButton.YesNoCancel, MessageBoxImage.Question);\n                if (result == MessageBoxResult.Yes)\n                    MainWindowExtension.SaveAsExecuted(index);\n                else if (result == MessageBoxResult.Cancel)\n                    return;\n            }\n            tabControl.Items.RemoveAt(index);\n\n            int deletedIndexTab = Int16.Parse(tabItems[index].Name.Substring(7)); // Return the index of deleted tabItem by get subTring from name then convert to int\n\n            tabItems.RemoveAt(index);\n\n            //Add Index of tab then sort it for reopen new tab situation \n            closedTabIndexes.Add(deletedIndexTab);\n            closedTabIndexes.Sort();\n        }\n\n    }\n}s","language":"CSharph"},{"path":"","header":"Document 2*","text":"saasdasdsa as \nfor int\nfor int i=0;i<n;i++","language":"CSharph"}]
