[{"path":"","header":"Document 2","text":"","language":"None"},{"path":"","header":"Document 3*","text":"()\n\t{\n\t\n}\n","language":"None"},{"path":"C:\\Users\\jonhn\\OneDrive\\Máy tính\\Notepad\\Notepad-main\\Notepad\\Notepad\\FindWindow.xaml.cs","header":"FindWindow.xaml.cs","text":"using Notepad.Classes;\nusing System;\nusing System.Collections.Generic;\nusing System.ComponentModel;\nusing System.Configuration;\nusing System.Linq;\nusing System.Text;\nusing System.Text.RegularExpressions;\nusing System.Threading.Tasks;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Data;\nusing System.Windows.Documents;\nusing System.Windows.Input;\nusing System.Windows.Media;\nusing System.Windows.Media.Imaging;\nusing System.Windows.Shapes;\n\nnamespace Notepad\n{\n    /// <summary>\n    /// Interaction logic for FindWindow.xaml\n    /// </summary>\n    public partial class FindWindow : Window\n    {\n        #region fields\n\n        private int originalCaret;\n        private List<int> tokensFound = new List<int>();\n        private int searchIndex = -1;\n        private System.Drawing.Color findColor = JsonDeserialize.GetColorFromString(ConfigurationManager.AppSettings[\"find_background_color\"]);\n        private System.Drawing.Color defaultColor = JsonDeserialize.GetColorFromString(ConfigurationManager.AppSettings[\"background_color\"]);\n        private string previousText = \"\";\n        private MainWindow mainWindow = Application.Current.MainWindow as MainWindow;\n        private TabControl tabControl = (Application.Current.MainWindow as MainWindow).tabControl;\n        private List<MainTabItem> tabItems = (Application.Current.MainWindow as MainWindow).tabItems;\n        private System.Windows.Forms.RichTextBox richTextBox; //curent RTB\n\n        private ICommand _replaceCommand;\n        public ICommand ReplaceCommand\n        {\n            get => _replaceCommand ?? (_replaceCommand = new Command(() => ReplaceExecuted(), () => ReplaceCanExecute));\n        }\n        private ICommand _replaceAllCommand;\n        public ICommand ReplaceAllCommand\n        {\n            get => _replaceAllCommand ?? (_replaceAllCommand = new Command(() => ReplaceAllExecuted(), () => ReplaceAllCanExecute));\n        }\n\n        #endregion\n\n        public FindWindow()\n        {\n            InitializeComponent();\n            DataContext = this;\n\n            richTextBox = (tabItems[tabControl.SelectedIndex].Content as TabItemContentUC).richTextBoxUserControl.richTextBox;\n            originalCaret = richTextBox.SelectionStart;\n\n            textBox.Focus();\n        }\n\n        private void matchCase_Checked(object sender, RoutedEventArgs e)\n        {\n            textBox_TextChanged(sender, e as TextChangedEventArgs);\n        }\n\n        private void textBox_TextChanged(object sender, TextChangedEventArgs e)\n        {\n            ///ClearTokenFromPreviousSearch();\n            (tabItems[tabControl.SelectedIndex].Content as TabItemContentUC).richTextBoxUserControl.UnsubscribeTextChangedEvents();\n\n            richTextBox.SelectAll();\n            richTextBox.SelectionBackColor = defaultColor;\n            richTextBox.DeselectAll();\n\n            foreach (int position in FindAll((matchCase.IsChecked == false) ? System.Windows.Forms.RichTextBoxFinds.None : System.Windows.Forms.RichTextBoxFinds.MatchCase))\n            {\n                richTextBox.Select(position, textBox.Text.Length);\n                richTextBox.SelectionBackColor = findColor;\n            }\n            (tabItems[tabControl.SelectedIndex].Content as TabItemContentUC).richTextBoxUserControl.SubscribeTextChangedEvents();\n        }\n\n        private List<int> FindAll(System.Windows.Forms.RichTextBoxFinds option = System.Windows.Forms.RichTextBoxFinds.None)\n        {\n\n            //list to hold all the positions\n            List<int> tokenPosition = new List<int>();\n\n            int position = -1;\n            int searchStart = 0;\n            int searchEnd = richTextBox.TextLength;\n\n            // if index= -1, the end of search\n            while (searchStart < richTextBox.Text.Length)\n            {\n                // A valid ending index\n                // Find the position of search string in RichTextBox\n                position = richTextBox.Find(textBox.Text, searchStart, searchEnd,option);\n\n                // Determine whether the text was found in richTextBox1.\n                if (position != -1)\n                {\n                    tokenPosition.Add(position);\n                    searchStart = position + textBox.Text.Length;\n                }\n                else\n                {\n                    break;\n                }\n            }\n            return tokenPosition;\n        }\n\n        private void FindNext_ButtonClick(object sender, RoutedEventArgs e)\n        {\n            (tabItems[tabControl.SelectedIndex].Content as TabItemContentUC).richTextBoxUserControl.UnsubscribeTextChangedEvents();\n\n            if (previousText != richTextBox.Text)\n            {\n                previousText = richTextBox.Text;\n\n                //get this again because we might have changed the text in text area and it made some of the found text position changed\n                tokensFound.Clear();\n                tokensFound = (matchCase.IsChecked == true) ? FindAll(System.Windows.Forms.RichTextBoxFinds.MatchCase) : FindAll();\n            }\n\n            if (tokensFound.Count != 0)\n            {\n                if (textBox.Text.Length == 0)\n                    return;\n                searchIndex++;\n                if (searchIndex == tokensFound.Count)\n                {\n                    searchIndex = 0; //return to the start\n                }\n                richTextBox.Select(tokensFound[searchIndex], textBox.Text.Length);\n            }\n            richTextBox.Focus();\n\n            (tabItems[tabControl.SelectedIndex].Content as TabItemContentUC).richTextBoxUserControl.SubscribeTextChangedEvents();\n        }\n\n        private void FindPrevious_ButtonClick(object sender, RoutedEventArgs e)\n        {\n            (tabItems[tabControl.SelectedIndex].Content as TabItemContentUC).richTextBoxUserControl.UnsubscribeTextChangedEvents();\n\n            if (previousText != richTextBox.Text)\n            {\n                previousText = richTextBox.Text;\n\n                //get this again because we might have changed the text in text area and it made some of the found text position changed\n                tokensFound.Clear();\n                tokensFound = (matchCase.IsChecked == true) ? FindAll(System.Windows.Forms.RichTextBoxFinds.MatchCase) : FindAll();\n            }\n\n            if (tokensFound.Count != 0)\n            {\n                if (textBox.Text.Length == 0)\n                    return;\n                searchIndex--;\n                if (searchIndex <= -1)\n                {\n                    searchIndex = tokensFound.Count - 1; //return to the end\n                }\n\n                richTextBox.Select(tokensFound[searchIndex], textBox.Text.Length);\n            }\n\n            (tabItems[tabControl.SelectedIndex].Content as TabItemContentUC).richTextBoxUserControl.SubscribeTextChangedEvents();\n        }\n\n\n        //protected override void OnDeactivated(EventArgs e)\n        //{\n        //    this.Opacity = 0.5;\n        //    richTextBox.Focus();\n        //    base.OnDeactivated(e);\n        //}\n        //protected override void OnActivated(EventArgs e)\n        //{\n        //    this.Opacity = 1;\n        //    base.OnActivated(e);\n        //}\n        protected override void OnClosing(CancelEventArgs e)\n        {\n            (tabItems[tabControl.SelectedIndex].Content as TabItemContentUC).richTextBoxUserControl.UnsubscribeTextChangedEvents();\n\n            richTextBox.SelectAll();\n            richTextBox.SelectionBackColor = defaultColor;\n            richTextBox.DeselectAll();\n            richTextBox.SelectionStart = originalCaret;\n\n            (tabItems[tabControl.SelectedIndex].Content as TabItemContentUC).richTextBoxUserControl.SubscribeTextChangedEvents();\n\n            base.OnClosing(e);\n        }\n\n\n\n        /// <summary>\n        /// Commands Executed and Can Execute\n        /// </summary>\n        private void ReplaceExecuted()\n        {\n\n            (tabItems[tabControl.SelectedIndex].Content as TabItemContentUC).richTextBoxUserControl.richTextBox.TextChanged -= (tabItems[tabControl.SelectedIndex].Content as TabItemContentUC).richTextBoxUserControl.RichTextBox_TextChangedLineNumber;\n\n            richTextBox.Focus();\n            if (string.IsNullOrEmpty(replaceTextBox.Text) || string.IsNullOrEmpty(textBox.Text)||richTextBox.SelectionLength==0)\n            {\n                return;\n            }\n\n            //get this again because we might have changed the text in text area and it made some of the found text position changed\n            tokensFound.Clear();\n            tokensFound = (matchCase.IsChecked == true) ? FindAll(System.Windows.Forms.RichTextBoxFinds.MatchCase) : FindAll();\n            searchIndex = (searchIndex<0||searchIndex>tokensFound.Count-1)?0:searchIndex;\n            if (tokensFound.Count > 0)\n            {\n                richTextBox.Select(tokensFound[searchIndex], textBox.Text.Length);\n                richTextBox.SelectedText = replaceTextBox.Text;\n\n                if (searchIndex == tokensFound.Count-1) searchIndex = 0;\n                else searchIndex++;\n                richTextBox.Select(tokensFound[searchIndex], replaceTextBox.Text.Length);\n            }\n\n            (tabItems[tabControl.SelectedIndex].Content as TabItemContentUC).richTextBoxUserControl.richTextBox.TextChanged += (tabItems[tabControl.SelectedIndex].Content as TabItemContentUC).richTextBoxUserControl.RichTextBox_TextChangedLineNumber;\n\n            //textBox_TextChanged(sender, e as TextChangedEventArgs);\n        }\n\n        private bool ReplaceCanExecute\n        {\n            get =>\n                 (\n                 string.IsNullOrEmpty(replaceTextBox.Text)\n                 ||\n                 string.IsNullOrEmpty(textBox.Text)\n                 ||\n                 richTextBox.SelectionLength == 0\n                 ||\n                 FindAll((matchCase.IsChecked == true) ? System.Windows.Forms.RichTextBoxFinds.MatchCase : System.Windows.Forms.RichTextBoxFinds.None).Count > 0\n                 );\n        }\n\n        private void ReplaceAllExecuted()\n        {\n            (tabItems[tabControl.SelectedIndex].Content as TabItemContentUC).richTextBoxUserControl.richTextBox.TextChanged -= (tabItems[tabControl.SelectedIndex].Content as TabItemContentUC).richTextBoxUserControl.RichTextBox_TextChangedLineNumber;\n\n\n            if (textBox.Text==replaceTextBox.Text||string.IsNullOrEmpty(textBox.Text))\n            {\n                return;\n            }\n            tokensFound=(matchCase.IsChecked == true) ? FindAll(System.Windows.Forms.RichTextBoxFinds.MatchCase) : FindAll();\n            richTextBox.Text=richTextBox.Text.Replace(textBox.Text, replaceTextBox.Text);\n            (tabItems[tabControl.SelectedIndex].Content as TabItemContentUC).richTextBoxUserControl.InvokeHighlightAll(); //rehighlight if changed\n            textBox_TextChanged(null,null);\n\n            (tabItems[tabControl.SelectedIndex].Content as TabItemContentUC).richTextBoxUserControl.richTextBox.TextChanged += (tabItems[tabControl.SelectedIndex].Content as TabItemContentUC).richTextBoxUserControl.RichTextBox_TextChangedLineNumber;\n        }\n\n        private bool ReplaceAllCanExecute\n        {\n            get =>\n                 (\n                 string.IsNullOrEmpty(replaceTextBox.Text)\n                 ||\n                 string.IsNullOrEmpty(textBox.Text)\n                 ||\n                 richTextBox.SelectionLength == 0\n                 ||\n                 FindAll((matchCase.IsChecked == true) ? System.Windows.Forms.RichTextBoxFinds.MatchCase : System.Windows.Forms.RichTextBoxFinds.None).Count > 0\n                 );\n        }\n    }\n}\n","language":"CSharph"}]
